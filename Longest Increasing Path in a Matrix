public class Solution {
    private int[][] matrix;
    private int[][] cache;
    private int[] dx = {1, -1, 0, 0};
    private int[] dy = {0, 0, 1, -1};
    private int m, n;

    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return 0;

        this.matrix = matrix;
        m = matrix.length;
        n = matrix[0].length;
        cache = new int[m][n];
        int maxPath = 1;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                maxPath = Math.max(maxPath, dfs(i, j));
            }
        }

        return maxPath;
    }

    private int dfs(int x, int y) {
        // Return cached value if already computed
        if (cache[x][y] != 0) return cache[x][y];

        int max = 1; // The path length starting from this cell is at least 1 (the cell itself)
        
        for (int d = 0; d < 4; d++) { // Explore all four possible directions
            int nx = x + dx[d];
            int ny = y + dy[d];

            // Check boundary conditions and whether the next cell has a larger value
            if (nx >= 0 && ny >= 0 && nx < m && ny < n && matrix[nx][ny] > matrix[x][y]) {
                max = Math.max(max, 1 + dfs(nx, ny)); // Recursively call dfs and update the maximum path length
            }
        }

        cache[x][y] = max; // Memoize the result
        return max;
    }
}
